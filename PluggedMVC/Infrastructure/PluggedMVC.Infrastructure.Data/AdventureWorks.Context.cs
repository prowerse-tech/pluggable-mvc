//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PluggedMVC.Infrastructure.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AdventureWorksEntities : DbContext
    {
        public AdventureWorksEntities()
            : base("name=AdventureWorksEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AWBuildVersion> AWBuildVersions { get; set; }
        public virtual DbSet<DatabaseLog> DatabaseLogs { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<DemoSalesOrderDetailSeed> DemoSalesOrderDetailSeeds { get; set; }
        public virtual DbSet<DemoSalesOrderHeaderSeed> DemoSalesOrderHeaderSeeds { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Employee_Temporal> Employee_Temporal { get; set; }
        public virtual DbSet<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; }
        public virtual DbSet<EmployeePayHistory> EmployeePayHistories { get; set; }
        public virtual DbSet<JobCandidate> JobCandidates { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AddressType> AddressTypes { get; set; }
        public virtual DbSet<BusinessEntity> BusinessEntities { get; set; }
        public virtual DbSet<BusinessEntityAddress> BusinessEntityAddresses { get; set; }
        public virtual DbSet<BusinessEntityContact> BusinessEntityContacts { get; set; }
        public virtual DbSet<ContactType> ContactTypes { get; set; }
        public virtual DbSet<CountryRegion> CountryRegions { get; set; }
        public virtual DbSet<EmailAddress> EmailAddresses { get; set; }
        public virtual DbSet<Password> Passwords { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Person_json> Person_json { get; set; }
        public virtual DbSet<Person_Temporal> Person_Temporal { get; set; }
        public virtual DbSet<PersonPhone> PersonPhones { get; set; }
        public virtual DbSet<PhoneNumberType> PhoneNumberTypes { get; set; }
        public virtual DbSet<StateProvince> StateProvinces { get; set; }
        public virtual DbSet<BillOfMaterial> BillOfMaterials { get; set; }
        public virtual DbSet<Culture> Cultures { get; set; }
        public virtual DbSet<Illustration> Illustrations { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Product_inmem> Product_inmem { get; set; }
        public virtual DbSet<Product_ondisk> Product_ondisk { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductCostHistory> ProductCostHistories { get; set; }
        public virtual DbSet<ProductDescription> ProductDescriptions { get; set; }
        public virtual DbSet<ProductInventory> ProductInventories { get; set; }
        public virtual DbSet<ProductListPriceHistory> ProductListPriceHistories { get; set; }
        public virtual DbSet<ProductModel> ProductModels { get; set; }
        public virtual DbSet<ProductModelIllustration> ProductModelIllustrations { get; set; }
        public virtual DbSet<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; }
        public virtual DbSet<ProductPhoto> ProductPhotoes { get; set; }
        public virtual DbSet<ProductProductPhoto> ProductProductPhotoes { get; set; }
        public virtual DbSet<ProductReview> ProductReviews { get; set; }
        public virtual DbSet<ProductSubcategory> ProductSubcategories { get; set; }
        public virtual DbSet<ScrapReason> ScrapReasons { get; set; }
        public virtual DbSet<TransactionHistory> TransactionHistories { get; set; }
        public virtual DbSet<TransactionHistoryArchive> TransactionHistoryArchives { get; set; }
        public virtual DbSet<UnitMeasure> UnitMeasures { get; set; }
        public virtual DbSet<WorkOrder> WorkOrders { get; set; }
        public virtual DbSet<WorkOrderRouting> WorkOrderRoutings { get; set; }
        public virtual DbSet<ProductVendor> ProductVendors { get; set; }
        public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public virtual DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; }
        public virtual DbSet<ShipMethod> ShipMethods { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<CountryRegionCurrency> CountryRegionCurrencies { get; set; }
        public virtual DbSet<CreditCard> CreditCards { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<CurrencyRate> CurrencyRates { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<OrderTracking> OrderTrackings { get; set; }
        public virtual DbSet<PersonCreditCard> PersonCreditCards { get; set; }
        public virtual DbSet<SalesOrder_json> SalesOrder_json { get; set; }
        public virtual DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public virtual DbSet<SalesOrderDetail_inmem> SalesOrderDetail_inmem { get; set; }
        public virtual DbSet<SalesOrderDetail_ondisk> SalesOrderDetail_ondisk { get; set; }
        public virtual DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; }
        public virtual DbSet<SalesOrderHeader_inmem> SalesOrderHeader_inmem { get; set; }
        public virtual DbSet<SalesOrderHeader_ondisk> SalesOrderHeader_ondisk { get; set; }
        public virtual DbSet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; }
        public virtual DbSet<SalesPerson> SalesPersons { get; set; }
        public virtual DbSet<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; }
        public virtual DbSet<SalesReason> SalesReasons { get; set; }
        public virtual DbSet<SalesTaxRate> SalesTaxRates { get; set; }
        public virtual DbSet<SalesTerritory> SalesTerritories { get; set; }
        public virtual DbSet<SalesTerritoryHistory> SalesTerritoryHistories { get; set; }
        public virtual DbSet<ShoppingCartItem> ShoppingCartItems { get; set; }
        public virtual DbSet<SpecialOffer> SpecialOffers { get; set; }
        public virtual DbSet<SpecialOffer_inmem> SpecialOffer_inmem { get; set; }
        public virtual DbSet<SpecialOffer_ondisk> SpecialOffer_ondisk { get; set; }
        public virtual DbSet<SpecialOfferProduct> SpecialOfferProducts { get; set; }
        public virtual DbSet<SpecialOfferProduct_inmem> SpecialOfferProduct_inmem { get; set; }
        public virtual DbSet<SpecialOfferProduct_ondisk> SpecialOfferProduct_ondisk { get; set; }
        public virtual DbSet<Store> Stores { get; set; }
        public virtual DbSet<TrackingEvent> TrackingEvents { get; set; }
        public virtual DbSet<Employee_Temporal_History> Employee_Temporal_History { get; set; }
        public virtual DbSet<Person_Temporal_History> Person_Temporal_History { get; set; }
        public virtual DbSet<ProductDocument> ProductDocuments { get; set; }
        public virtual DbSet<CustomerPII> CustomerPIIs { get; set; }
        public virtual DbSet<vEmployee> vEmployees { get; set; }
        public virtual DbSet<vEmployeeDepartment> vEmployeeDepartments { get; set; }
        public virtual DbSet<vEmployeeDepartmentHistory> vEmployeeDepartmentHistories { get; set; }
        public virtual DbSet<vEmployeePersonTemporalInfo> vEmployeePersonTemporalInfoes { get; set; }
        public virtual DbSet<vJobCandidate> vJobCandidates { get; set; }
        public virtual DbSet<vJobCandidateEducation> vJobCandidateEducations { get; set; }
        public virtual DbSet<vJobCandidateEmployment> vJobCandidateEmployments { get; set; }
        public virtual DbSet<vAdditionalContactInfo> vAdditionalContactInfoes { get; set; }
        public virtual DbSet<vStateProvinceCountryRegion> vStateProvinceCountryRegions { get; set; }
        public virtual DbSet<vProductAndDescription> vProductAndDescriptions { get; set; }
        public virtual DbSet<vProductModelCatalogDescription> vProductModelCatalogDescriptions { get; set; }
        public virtual DbSet<vProductModelInstruction> vProductModelInstructions { get; set; }
        public virtual DbSet<vVendorWithAddress> vVendorWithAddresses { get; set; }
        public virtual DbSet<vVendorWithContact> vVendorWithContacts { get; set; }
        public virtual DbSet<vIndividualCustomer> vIndividualCustomers { get; set; }
        public virtual DbSet<vPersonDemographic> vPersonDemographics { get; set; }
        public virtual DbSet<vSalesPerson> vSalesPersons { get; set; }
        public virtual DbSet<vSalesPersonSalesByFiscalYear> vSalesPersonSalesByFiscalYears { get; set; }
        public virtual DbSet<vStoreWithAddress> vStoreWithAddresses { get; set; }
        public virtual DbSet<vStoreWithContact> vStoreWithContacts { get; set; }
        public virtual DbSet<vStoreWithDemographic> vStoreWithDemographics { get; set; }
    
        [DbFunction("AdventureWorksEntities", "ufnGetContactInformation")]
        public virtual IQueryable<ufnGetContactInformation_Result> ufnGetContactInformation(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufnGetContactInformation_Result>("[AdventureWorksEntities].[ufnGetContactInformation](@PersonID)", personIDParameter);
        }
    
        [DbFunction("AdventureWorksEntities", "vSalesOrderDetail_extended_inmem")]
        public virtual IQueryable<vSalesOrderDetail_extended_inmem_Result> vSalesOrderDetail_extended_inmem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<vSalesOrderDetail_extended_inmem_Result>("[AdventureWorksEntities].[vSalesOrderDetail_extended_inmem]()");
        }
    
        [DbFunction("AdventureWorksEntities", "vSalesOrderHeader_extended_inmem")]
        public virtual IQueryable<vSalesOrderHeader_extended_inmem_Result> vSalesOrderHeader_extended_inmem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<vSalesOrderHeader_extended_inmem_Result>("[AdventureWorksEntities].[vSalesOrderHeader_extended_inmem]()");
        }
    
        [DbFunction("AdventureWorksEntities", "customerAccessPredicate")]
        public virtual IQueryable<customerAccessPredicate_Result> customerAccessPredicate(Nullable<int> territoryID)
        {
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<customerAccessPredicate_Result>("[AdventureWorksEntities].[customerAccessPredicate](@TerritoryID)", territoryIDParameter);
        }
    
        public virtual int uspAddOrderTrackingEvent(Nullable<int> salesOrderID, Nullable<int> trackingEventID, string eventDetails)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var trackingEventIDParameter = trackingEventID.HasValue ?
                new ObjectParameter("TrackingEventID", trackingEventID) :
                new ObjectParameter("TrackingEventID", typeof(int));
    
            var eventDetailsParameter = eventDetails != null ?
                new ObjectParameter("EventDetails", eventDetails) :
                new ObjectParameter("EventDetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddOrderTrackingEvent", salesOrderIDParameter, trackingEventIDParameter, eventDetailsParameter);
        }
    
        public virtual ObjectResult<uspGetBillOfMaterials_Result> uspGetBillOfMaterials(Nullable<int> startProductID, Nullable<System.DateTime> checkDate)
        {
            var startProductIDParameter = startProductID.HasValue ?
                new ObjectParameter("StartProductID", startProductID) :
                new ObjectParameter("StartProductID", typeof(int));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBillOfMaterials_Result>("uspGetBillOfMaterials", startProductIDParameter, checkDateParameter);
        }
    
        public virtual ObjectResult<uspGetEmployeeManagers_Result> uspGetEmployeeManagers(Nullable<int> businessEntityID)
        {
            var businessEntityIDParameter = businessEntityID.HasValue ?
                new ObjectParameter("BusinessEntityID", businessEntityID) :
                new ObjectParameter("BusinessEntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetEmployeeManagers_Result>("uspGetEmployeeManagers", businessEntityIDParameter);
        }
    
        public virtual ObjectResult<uspGetManagerEmployees_Result> uspGetManagerEmployees(Nullable<int> businessEntityID)
        {
            var businessEntityIDParameter = businessEntityID.HasValue ?
                new ObjectParameter("BusinessEntityID", businessEntityID) :
                new ObjectParameter("BusinessEntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetManagerEmployees_Result>("uspGetManagerEmployees", businessEntityIDParameter);
        }
    
        public virtual ObjectResult<uspGetOrderTrackingBySalesOrderID_Result> uspGetOrderTrackingBySalesOrderID(Nullable<int> salesOrderID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetOrderTrackingBySalesOrderID_Result>("uspGetOrderTrackingBySalesOrderID", salesOrderIDParameter);
        }
    
        public virtual ObjectResult<uspGetOrderTrackingByTrackingNumber_Result> uspGetOrderTrackingByTrackingNumber(string carrierTrackingNumber)
        {
            var carrierTrackingNumberParameter = carrierTrackingNumber != null ?
                new ObjectParameter("CarrierTrackingNumber", carrierTrackingNumber) :
                new ObjectParameter("CarrierTrackingNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetOrderTrackingByTrackingNumber_Result>("uspGetOrderTrackingByTrackingNumber", carrierTrackingNumberParameter);
        }
    
        public virtual ObjectResult<uspGetWhereUsedProductID_Result> uspGetWhereUsedProductID(Nullable<int> startProductID, Nullable<System.DateTime> checkDate)
        {
            var startProductIDParameter = startProductID.HasValue ?
                new ObjectParameter("StartProductID", startProductID) :
                new ObjectParameter("StartProductID", typeof(int));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetWhereUsedProductID_Result>("uspGetWhereUsedProductID", startProductIDParameter, checkDateParameter);
        }
    
        public virtual int uspLogError(ObjectParameter errorLogID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogError", errorLogID);
        }
    
        public virtual int uspPrintError()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPrintError");
        }
    
        public virtual int uspSearchCandidateResumes(string searchString, Nullable<bool> useInflectional, Nullable<bool> useThesaurus, Nullable<int> language)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            var useInflectionalParameter = useInflectional.HasValue ?
                new ObjectParameter("useInflectional", useInflectional) :
                new ObjectParameter("useInflectional", typeof(bool));
    
            var useThesaurusParameter = useThesaurus.HasValue ?
                new ObjectParameter("useThesaurus", useThesaurus) :
                new ObjectParameter("useThesaurus", typeof(bool));
    
            var languageParameter = language.HasValue ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSearchCandidateResumes", searchStringParameter, useInflectionalParameter, useThesaurusParameter, languageParameter);
        }
    
        public virtual int usp_DemoInitSeed(Nullable<int> items_per_order)
        {
            var items_per_orderParameter = items_per_order.HasValue ?
                new ObjectParameter("items_per_order", items_per_order) :
                new ObjectParameter("items_per_order", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DemoInitSeed", items_per_orderParameter);
        }
    
        public virtual int usp_DemoReset()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DemoReset");
        }
    
        public virtual ObjectResult<sp_GetEmployee_Person_Info_AsOf_Result> sp_GetEmployee_Person_Info_AsOf(Nullable<System.DateTime> asOf)
        {
            var asOfParameter = asOf.HasValue ?
                new ObjectParameter("asOf", asOf) :
                new ObjectParameter("asOf", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEmployee_Person_Info_AsOf_Result>("sp_GetEmployee_Person_Info_AsOf", asOfParameter);
        }
    
        public virtual int sp_UpdateEmployee_Temporal(Nullable<int> businessEntityID, string loginID, string jobTitle, string maritalStatus, string gender, Nullable<short> vacationHours, Nullable<short> sickLeaveHours)
        {
            var businessEntityIDParameter = businessEntityID.HasValue ?
                new ObjectParameter("BusinessEntityID", businessEntityID) :
                new ObjectParameter("BusinessEntityID", typeof(int));
    
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var maritalStatusParameter = maritalStatus != null ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var vacationHoursParameter = vacationHours.HasValue ?
                new ObjectParameter("VacationHours", vacationHours) :
                new ObjectParameter("VacationHours", typeof(short));
    
            var sickLeaveHoursParameter = sickLeaveHours.HasValue ?
                new ObjectParameter("SickLeaveHours", sickLeaveHours) :
                new ObjectParameter("SickLeaveHours", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateEmployee_Temporal", businessEntityIDParameter, loginIDParameter, jobTitleParameter, maritalStatusParameter, genderParameter, vacationHoursParameter, sickLeaveHoursParameter);
        }
    
        public virtual int uspUpdateEmployeeHireInfo(Nullable<int> businessEntityID, string jobTitle, Nullable<System.DateTime> hireDate, Nullable<System.DateTime> rateChangeDate, Nullable<decimal> rate, Nullable<byte> payFrequency, Nullable<bool> currentFlag)
        {
            var businessEntityIDParameter = businessEntityID.HasValue ?
                new ObjectParameter("BusinessEntityID", businessEntityID) :
                new ObjectParameter("BusinessEntityID", typeof(int));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var rateChangeDateParameter = rateChangeDate.HasValue ?
                new ObjectParameter("RateChangeDate", rateChangeDate) :
                new ObjectParameter("RateChangeDate", typeof(System.DateTime));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var payFrequencyParameter = payFrequency.HasValue ?
                new ObjectParameter("PayFrequency", payFrequency) :
                new ObjectParameter("PayFrequency", typeof(byte));
    
            var currentFlagParameter = currentFlag.HasValue ?
                new ObjectParameter("CurrentFlag", currentFlag) :
                new ObjectParameter("CurrentFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateEmployeeHireInfo", businessEntityIDParameter, jobTitleParameter, hireDateParameter, rateChangeDateParameter, rateParameter, payFrequencyParameter, currentFlagParameter);
        }
    
        public virtual int uspUpdateEmployeeLogin(Nullable<int> businessEntityID, string loginID, string jobTitle, Nullable<System.DateTime> hireDate, Nullable<bool> currentFlag)
        {
            var businessEntityIDParameter = businessEntityID.HasValue ?
                new ObjectParameter("BusinessEntityID", businessEntityID) :
                new ObjectParameter("BusinessEntityID", typeof(int));
    
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var currentFlagParameter = currentFlag.HasValue ?
                new ObjectParameter("CurrentFlag", currentFlag) :
                new ObjectParameter("CurrentFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateEmployeeLogin", businessEntityIDParameter, loginIDParameter, jobTitleParameter, hireDateParameter, currentFlagParameter);
        }
    
        public virtual int uspUpdateEmployeePersonalInfo(Nullable<int> businessEntityID, string nationalIDNumber, Nullable<System.DateTime> birthDate, string maritalStatus, string gender)
        {
            var businessEntityIDParameter = businessEntityID.HasValue ?
                new ObjectParameter("BusinessEntityID", businessEntityID) :
                new ObjectParameter("BusinessEntityID", typeof(int));
    
            var nationalIDNumberParameter = nationalIDNumber != null ?
                new ObjectParameter("NationalIDNumber", nationalIDNumber) :
                new ObjectParameter("NationalIDNumber", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var maritalStatusParameter = maritalStatus != null ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateEmployeePersonalInfo", businessEntityIDParameter, nationalIDNumberParameter, birthDateParameter, maritalStatusParameter, genderParameter);
        }
    
        public virtual int sp_DeletePerson_Temporal(Nullable<int> businessEntityID)
        {
            var businessEntityIDParameter = businessEntityID.HasValue ?
                new ObjectParameter("BusinessEntityID", businessEntityID) :
                new ObjectParameter("BusinessEntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeletePerson_Temporal", businessEntityIDParameter);
        }
    
        public virtual int sp_UpdatePerson_Temporal(Nullable<int> businessEntityID, string personType, string title, string firstName, string middleName, string lastName, string suffix, Nullable<short> emailPromotion)
        {
            var businessEntityIDParameter = businessEntityID.HasValue ?
                new ObjectParameter("BusinessEntityID", businessEntityID) :
                new ObjectParameter("BusinessEntityID", typeof(int));
    
            var personTypeParameter = personType != null ?
                new ObjectParameter("PersonType", personType) :
                new ObjectParameter("PersonType", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var emailPromotionParameter = emailPromotion.HasValue ?
                new ObjectParameter("EmailPromotion", emailPromotion) :
                new ObjectParameter("EmailPromotion", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePerson_Temporal", businessEntityIDParameter, personTypeParameter, titleParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixParameter, emailPromotionParameter);
        }
    
        public virtual int usp_InsertSalesOrder_inmem(ObjectParameter salesOrderID, Nullable<System.DateTime> dueDate, Nullable<int> customerID, Nullable<int> billToAddressID, Nullable<int> shipToAddressID, Nullable<int> shipMethodID, Nullable<byte> status, Nullable<bool> onlineOrderFlag, string purchaseOrderNumber, string accountNumber, Nullable<int> salesPersonID, Nullable<int> territoryID, Nullable<int> creditCardID, string creditCardApprovalCode, Nullable<int> currencyRateID, string comment)
        {
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var billToAddressIDParameter = billToAddressID.HasValue ?
                new ObjectParameter("BillToAddressID", billToAddressID) :
                new ObjectParameter("BillToAddressID", typeof(int));
    
            var shipToAddressIDParameter = shipToAddressID.HasValue ?
                new ObjectParameter("ShipToAddressID", shipToAddressID) :
                new ObjectParameter("ShipToAddressID", typeof(int));
    
            var shipMethodIDParameter = shipMethodID.HasValue ?
                new ObjectParameter("ShipMethodID", shipMethodID) :
                new ObjectParameter("ShipMethodID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var onlineOrderFlagParameter = onlineOrderFlag.HasValue ?
                new ObjectParameter("OnlineOrderFlag", onlineOrderFlag) :
                new ObjectParameter("OnlineOrderFlag", typeof(bool));
    
            var purchaseOrderNumberParameter = purchaseOrderNumber != null ?
                new ObjectParameter("PurchaseOrderNumber", purchaseOrderNumber) :
                new ObjectParameter("PurchaseOrderNumber", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var creditCardIDParameter = creditCardID.HasValue ?
                new ObjectParameter("CreditCardID", creditCardID) :
                new ObjectParameter("CreditCardID", typeof(int));
    
            var creditCardApprovalCodeParameter = creditCardApprovalCode != null ?
                new ObjectParameter("CreditCardApprovalCode", creditCardApprovalCode) :
                new ObjectParameter("CreditCardApprovalCode", typeof(string));
    
            var currencyRateIDParameter = currencyRateID.HasValue ?
                new ObjectParameter("CurrencyRateID", currencyRateID) :
                new ObjectParameter("CurrencyRateID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertSalesOrder_inmem", salesOrderID, dueDateParameter, customerIDParameter, billToAddressIDParameter, shipToAddressIDParameter, shipMethodIDParameter, statusParameter, onlineOrderFlagParameter, purchaseOrderNumberParameter, accountNumberParameter, salesPersonIDParameter, territoryIDParameter, creditCardIDParameter, creditCardApprovalCodeParameter, currencyRateIDParameter, commentParameter);
        }
    
        public virtual int usp_InsertSalesOrder_ondisk(ObjectParameter salesOrderID, Nullable<System.DateTime> dueDate, Nullable<int> customerID, Nullable<int> billToAddressID, Nullable<int> shipToAddressID, Nullable<int> shipMethodID, Nullable<byte> status, Nullable<bool> onlineOrderFlag, string purchaseOrderNumber, string accountNumber, Nullable<int> salesPersonID, Nullable<int> territoryID, Nullable<int> creditCardID, string creditCardApprovalCode, Nullable<int> currencyRateID, string comment)
        {
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var billToAddressIDParameter = billToAddressID.HasValue ?
                new ObjectParameter("BillToAddressID", billToAddressID) :
                new ObjectParameter("BillToAddressID", typeof(int));
    
            var shipToAddressIDParameter = shipToAddressID.HasValue ?
                new ObjectParameter("ShipToAddressID", shipToAddressID) :
                new ObjectParameter("ShipToAddressID", typeof(int));
    
            var shipMethodIDParameter = shipMethodID.HasValue ?
                new ObjectParameter("ShipMethodID", shipMethodID) :
                new ObjectParameter("ShipMethodID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var onlineOrderFlagParameter = onlineOrderFlag.HasValue ?
                new ObjectParameter("OnlineOrderFlag", onlineOrderFlag) :
                new ObjectParameter("OnlineOrderFlag", typeof(bool));
    
            var purchaseOrderNumberParameter = purchaseOrderNumber != null ?
                new ObjectParameter("PurchaseOrderNumber", purchaseOrderNumber) :
                new ObjectParameter("PurchaseOrderNumber", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var creditCardIDParameter = creditCardID.HasValue ?
                new ObjectParameter("CreditCardID", creditCardID) :
                new ObjectParameter("CreditCardID", typeof(int));
    
            var creditCardApprovalCodeParameter = creditCardApprovalCode != null ?
                new ObjectParameter("CreditCardApprovalCode", creditCardApprovalCode) :
                new ObjectParameter("CreditCardApprovalCode", typeof(string));
    
            var currencyRateIDParameter = currencyRateID.HasValue ?
                new ObjectParameter("CurrencyRateID", currencyRateID) :
                new ObjectParameter("CurrencyRateID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertSalesOrder_ondisk", salesOrderID, dueDateParameter, customerIDParameter, billToAddressIDParameter, shipToAddressIDParameter, shipMethodIDParameter, statusParameter, onlineOrderFlagParameter, purchaseOrderNumberParameter, accountNumberParameter, salesPersonIDParameter, territoryIDParameter, creditCardIDParameter, creditCardApprovalCodeParameter, currencyRateIDParameter, commentParameter);
        }
    
        public virtual int usp_UpdateSalesOrderShipInfo_inmem(Nullable<int> salesOrderID, Nullable<System.DateTime> shipDate, string comment, Nullable<byte> status, Nullable<decimal> taxRate, Nullable<decimal> freight, string carrierTrackingNumber)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var shipDateParameter = shipDate.HasValue ?
                new ObjectParameter("ShipDate", shipDate) :
                new ObjectParameter("ShipDate", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var carrierTrackingNumberParameter = carrierTrackingNumber != null ?
                new ObjectParameter("CarrierTrackingNumber", carrierTrackingNumber) :
                new ObjectParameter("CarrierTrackingNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateSalesOrderShipInfo_inmem", salesOrderIDParameter, shipDateParameter, commentParameter, statusParameter, taxRateParameter, freightParameter, carrierTrackingNumberParameter);
        }
    
        public virtual int usp_UpdateSalesOrderShipInfo_native(Nullable<int> salesOrderID, Nullable<System.DateTime> shipDate, string comment, Nullable<byte> status, Nullable<decimal> taxRate, Nullable<decimal> freight, string carrierTrackingNumber)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var shipDateParameter = shipDate.HasValue ?
                new ObjectParameter("ShipDate", shipDate) :
                new ObjectParameter("ShipDate", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var carrierTrackingNumberParameter = carrierTrackingNumber != null ?
                new ObjectParameter("CarrierTrackingNumber", carrierTrackingNumber) :
                new ObjectParameter("CarrierTrackingNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateSalesOrderShipInfo_native", salesOrderIDParameter, shipDateParameter, commentParameter, statusParameter, taxRateParameter, freightParameter, carrierTrackingNumberParameter);
        }
    
        public virtual int usp_UpdateSalesOrderShipInfo_ondisk(Nullable<int> salesOrderID, Nullable<System.DateTime> shipDate, string comment, Nullable<byte> status, Nullable<decimal> taxRate, Nullable<decimal> freight, string carrierTrackingNumber)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var shipDateParameter = shipDate.HasValue ?
                new ObjectParameter("ShipDate", shipDate) :
                new ObjectParameter("ShipDate", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var carrierTrackingNumberParameter = carrierTrackingNumber != null ?
                new ObjectParameter("CarrierTrackingNumber", carrierTrackingNumber) :
                new ObjectParameter("CarrierTrackingNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateSalesOrderShipInfo_ondisk", salesOrderIDParameter, shipDateParameter, commentParameter, statusParameter, taxRateParameter, freightParameter, carrierTrackingNumberParameter);
        }
    }
}
